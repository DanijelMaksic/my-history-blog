{"mappings":"AAAA,iCAAiC;AAEjC,MAAM,YAAY,SAAS,cAAc,CAAC;AAC1C,MAAM,OAAO,SAAS,aAAa,CAAC;AACpC,MAAM,MAAM,SAAS,cAAc,CAAC;AAEpC,8BAA8B;AAC9B,UAAU,gBAAgB,CAAC,SAAS;IAChC,KAAK,SAAS,CAAC,MAAM,CAAC;IAEtB,gCAAgC;IAChC,IAAI,SAAS,CAAC,MAAM,CAAC;IACrB,IAAI,SAAS,CAAC,MAAM,CAAC;IAErB,iDAAiD;IACjD,IAAI,KAAK,SAAS,CAAC,QAAQ,CAAC,SACxB,aAAa,OAAO,CAAC,iBAAiB;IAG1C,IAAI,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,SACzB,aAAa,OAAO,CAAC,iBAAiB;AAE9C;AAEA,uDAAuD;AACvD,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,UAAU,QACV,KAAK,SAAS,CAAC,GAAG,CAAC;IAEvB,IAAI,UAAU,SAAS;QACnB,KAAK,SAAS,CAAC,MAAM,CAAC;QACtB,IAAI,SAAS,CAAC,MAAM,CAAC;IACzB;AACJ;AAEA,+BAA+B;AAC/B,IACI,aAAa,KAAK,KAAK,UACtB,CAAE,CAAA,WAAW,YAAW,KACrB,OAAO,UAAU,CAAC,gCAAgC,OAAO,EAC/D;IACE,SAAS,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC;IACvC,IAAI,SAAS,CAAC,MAAM,CAAC;AACzB,OACI,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;AAG9C,kDAAkD;AAClD,aAAa,KAAK,GAAG;AAErB,iDAAiD;AACjD,aAAa,KAAK,GAAG;AAErB,oEAAoE;AACpE,aAAa,UAAU,CAAC;AAExB,4CAA4C;AAE5C,IAAI,WAAW,SAAS,gBAAgB,CAAC;AACzC,IAAI,aAAa,QAAQ,CAAC,EAAE;AAC5B,IAAI,YACA,WAAW,SAAS,CAAC,GAAG,CAAC;AAG7B,IAAI,cAAc,SAAU,UAAU;IAClC,IAAI,WAAW,EAAE;IACjB,IAAI,UAAU,WAAW,UAAU,CAAC,UAAU;IAE9C,MAAO,QAAS;QACZ,kGAAkG;QAClG,IAAI,QAAQ,QAAQ,KAAK,KAAK,YAAY,YACtC,SAAS,IAAI,CAAC;QAElB,UAAU,QAAQ,WAAW;IACjC;IAEA,OAAO;AACX;AAEA,MAAM,mBAAmB;IACrB,yCAAyC;IACzC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;IAEnB,uBAAuB;IACvB,IAAI,WAAW,YAAY,IAAI;IAE/B,0CAA0C;IAC1C,SAAS,OAAO,CAAC,CAAC;QACd,QAAQ,SAAS,CAAC,MAAM,CAAC;IAC7B;AACJ;AAEA,IAAI;AACJ,IAAK,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAC7B,QAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,SAAS","sources":["src/controller.js"],"sourcesContent":["//            --== DARK MODE ==--\r\n\r\nconst schemeBtn = document.getElementById('scheme-toggle');\r\nconst root = document.querySelector(':root');\r\nconst dot = document.getElementById('dot');\r\n\r\n// When user selects the theme\r\nschemeBtn.addEventListener('click', () => {\r\n    root.classList.toggle('dark');\r\n\r\n    //  depending on theme, move dot\r\n    dot.classList.toggle('translate-x-5');\r\n    dot.classList.toggle('mr-0.5');\r\n\r\n    // If user changes theme, save it to localStorage\r\n    if (root.classList.contains('dark')) {\r\n        localStorage.setItem('selectedTheme', 'dark');\r\n    }\r\n\r\n    if (!root.classList.contains('dark')) {\r\n        localStorage.setItem('selectedTheme', 'light');\r\n    }\r\n});\r\n\r\n// When loading document select theme from localStorage\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    const theme = localStorage.getItem('selectedTheme');\r\n    if (theme === 'dark') {\r\n        root.classList.add('dark');\r\n    }\r\n    if (theme === 'light') {\r\n        root.classList.remove('dark');\r\n        dot.classList.toggle('translate-x-5');\r\n    }\r\n});\r\n\r\n// Check for browser preference\r\nif (\r\n    localStorage.theme === 'dark' ||\r\n    (!('theme' in localStorage) &&\r\n        window.matchMedia('(prefers-color-scheme: dark)').matches)\r\n) {\r\n    document.documentElement.classList.add('dark');\r\n    dot.classList.toggle('translate-x-5');\r\n} else {\r\n    document.documentElement.classList.remove('dark');\r\n}\r\n\r\n// Whenever the user explicitly chooses light mode\r\nlocalStorage.theme = 'light';\r\n\r\n// Whenever the user explicitly chooses dark mode\r\nlocalStorage.theme = 'dark';\r\n\r\n// Whenever the user explicitly chooses to respect the OS preference\r\nlocalStorage.removeItem('theme');\r\n\r\n//            --== TOGGLE SORTING CLASS ==--\r\n\r\nlet sortBtns = document.querySelectorAll('.sort-btn');\r\nlet defaultBtn = sortBtns[0];\r\nif (defaultBtn) {\r\n    defaultBtn.classList.add('sortActive');\r\n}\r\n\r\nlet getSiblings = function (currrentEl) {\r\n    let siblings = [];\r\n    let sibling = currrentEl.parentNode.firstChild;\r\n\r\n    while (sibling) {\r\n        // Sibling might be a text fragment or whitespace, we only want elements, so we use nodeType === 1\r\n        if (sibling.nodeType === 1 && sibling !== currrentEl) {\r\n            siblings.push(sibling);\r\n        }\r\n        sibling = sibling.nextSibling;\r\n    }\r\n\r\n    return siblings;\r\n};\r\n\r\nconst changeSortOption = function () {\r\n    // Adding active class to clicked element\r\n    this.classList.add('sortActive');\r\n\r\n    // Getting all siblings\r\n    let siblings = getSiblings(this);\r\n\r\n    // Removing active class from all siblings\r\n    siblings.forEach((sibling) => {\r\n        sibling.classList.remove('sortActive');\r\n    });\r\n};\r\n\r\nlet i;\r\nfor (i = 0; i < sortBtns.length; i++) {\r\n    sortBtns[i].addEventListener('click', changeSortOption);\r\n}\r\n"],"names":[],"version":3,"file":"archive.253c89eb.js.map","sourceRoot":"/__parcel_source_root/"}